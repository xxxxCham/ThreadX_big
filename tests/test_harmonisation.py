#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de l'harmonisation ThreadX
V√©rifie que toutes les fonctionnalit√©s sont harmonis√©es avec la structure
"""

import sys
from pathlib import Path

# Configuration ThreadX
THREADX_ROOT = Path(__file__).parent
sys.path.insert(0, str(THREADX_ROOT))
sys.path.insert(0, str(THREADX_ROOT / "src"))


def test_structure_harmonisee():
    """Test de la structure harmonis√©e"""
    print("=" * 60)
    print("üîß TEST DE L'HARMONISATION THREADX")
    print("=" * 60)

    # Chemins harmonis√©s
    paths = {
        "JSON (OHLCV)": THREADX_ROOT / "data" / "crypto_data_json",
        "Parquet (OHLCV)": THREADX_ROOT / "data" / "crypto_data_parquet",
        "Indicateurs Tech": THREADX_ROOT / "data" / "indicateurs_tech_data",
        "ATR": THREADX_ROOT / "data" / "indicateurs_tech_data" / "atr",
        "Bollinger": THREADX_ROOT / "data" / "indicateurs_tech_data" / "bollinger",
        "Registry": THREADX_ROOT / "data" / "indicateurs_tech_data" / "registry",
        "Cache": THREADX_ROOT / "data" / "cache",
        "Tokens List": THREADX_ROOT / "data" / "resultats_choix_des_100tokens.json",
    }

    print("\nüìÅ STRUCTURE DES DOSSIERS:")
    for name, path in paths.items():
        exists = "‚úÖ" if path.exists() else "‚ùå"
        if path.is_file():
            size = f"({path.stat().st_size / 1024:.1f} KB)" if path.exists() else ""
        else:
            count = len(list(path.glob("*"))) if path.exists() else 0
            size = f"({count} fichiers)" if path.exists() else ""
        print(f"  {exists} {name:<20} {size}")

    # Test imports
    print("\nüîß TEST DES IMPORTS:")
    try:
        from apps.threadx_tradxpro_interface import (
            setup_indicators_structure,
            load_indicators_registry,
            calculate_atr,
            calculate_bollinger_bands,
            verify_and_clean_cache,
        )

        print("  ‚úÖ Imports fonctions harmonis√©es: OK")
    except ImportError as e:
        print(f"  ‚ùå Erreur imports: {e}")
        return False

    # Test initialisation structure
    print("\nüèóÔ∏è TEST INITIALISATION:")
    try:
        setup_indicators_structure()
        print("  ‚úÖ Structure indicateurs: OK")
    except Exception as e:
        print(f"  ‚ùå Erreur structure: {e}")

    # Test registry
    print("\nüìã TEST REGISTRY:")
    try:
        registry = load_indicators_registry()
        if registry and "indicators" in registry:
            print(f"  ‚úÖ Registry charg√©: {len(registry['indicators'])} indicateurs")
            for name, info in registry["indicators"].items():
                print(f"    - {name}: {info['name']}")
        else:
            print("  ‚ö†Ô∏è Registry vide ou invalide")
    except Exception as e:
        print(f"  ‚ùå Erreur registry: {e}")

    # Test donn√©es existantes
    print("\nüìä TEST DONN√âES EXISTANTES:")

    # JSON files
    json_files = (
        list(paths["JSON (OHLCV)"].glob("*.json"))
        if paths["JSON (OHLCV)"].exists()
        else []
    )
    print(f"  üìÑ Fichiers JSON OHLCV: {len(json_files)}")

    # Parquet files
    parquet_files = (
        list(paths["Parquet (OHLCV)"].glob("*.parquet"))
        if paths["Parquet (OHLCV)"].exists()
        else []
    )
    print(f"  üìä Fichiers Parquet OHLCV: {len(parquet_files)}")

    # Indicateurs ATR
    atr_files = list(paths["ATR"].glob("*.parquet")) if paths["ATR"].exists() else []
    print(f"  üìà Indicateurs ATR: {len(atr_files)}")

    # Indicateurs Bollinger
    bb_files = (
        list(paths["Bollinger"].glob("*.parquet"))
        if paths["Bollinger"].exists()
        else []
    )
    print(f"  üìà Indicateurs Bollinger: {len(bb_files)}")

    # Cache
    cache_files = list(paths["Cache"].glob("**/*")) if paths["Cache"].exists() else []
    cache_size = sum(f.stat().st_size for f in cache_files if f.is_file()) / 1024 / 1024
    print(f"  üóÉÔ∏è Cache: {len(cache_files)} fichiers, {cache_size:.1f} MB")

    print("\n" + "=" * 60)
    print("‚úÖ TEST D'HARMONISATION TERMIN√â")
    print("üöÄ L'interface TradXPro est pr√™te avec la structure harmonis√©e !")
    print("=" * 60)

    return True


def show_usage_guide():
    """Guide d'utilisation harmonis√©"""
    print("\nüìñ GUIDE D'UTILISATION - INTERFACE HARMONIS√âE:")
    print(
        """
    1. üîÑ Refresh 100 meilleures monnaies
       ‚Üí Met √† jour: data/resultats_choix_des_100tokens.json
       
    2. üì• T√©l√©charger OHLCV (sans indicateurs)
       ‚Üí Sauvegarde dans: data/crypto_data_json/
       
    3. üìä T√©l√©charger OHLCV + Indicateurs
       ‚Üí OHLCV dans: data/crypto_data_json/
       ‚Üí ATR dans: data/indicateurs_tech_data/atr/
       ‚Üí Bollinger dans: data/indicateurs_tech_data/bollinger/
       
    4. üîÑ Convertir JSON ‚Üí Parquet
       ‚Üí Conversion vers: data/crypto_data_parquet/
       
    5. ‚úÖ V√©rifier & Compl√©ter donn√©es
       ‚Üí V√©rifie toute la structure harmonis√©e
       ‚Üí Nettoie le cache: data/cache/
       ‚Üí G√©n√®re rapport: data/verification_report.json
    """
    )


if __name__ == "__main__":
    success = test_structure_harmonisee()
    if success:
        show_usage_guide()
    sys.exit(0 if success else 1)
